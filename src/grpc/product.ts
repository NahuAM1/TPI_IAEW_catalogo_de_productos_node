// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: src/grpc/product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "productos";

export interface ProductAvailabilityRequest {
  productoId: string;
  cantidad: number;
}

export interface ProductAvailabilityResponse {
  productoId: string;
  disponible: boolean;
  precio: number;
  stockActual: number;
}

function createBaseProductAvailabilityRequest(): ProductAvailabilityRequest {
  return { productoId: "", cantidad: 0 };
}

export const ProductAvailabilityRequest: MessageFns<ProductAvailabilityRequest> = {
  encode(message: ProductAvailabilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productoId !== "") {
      writer.uint32(10).string(message.productoId);
    }
    if (message.cantidad !== 0) {
      writer.uint32(16).int32(message.cantidad);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductAvailabilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductAvailabilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cantidad = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductAvailabilityRequest {
    return {
      productoId: isSet(object.productoId) ? globalThis.String(object.productoId) : "",
      cantidad: isSet(object.cantidad) ? globalThis.Number(object.cantidad) : 0,
    };
  },

  toJSON(message: ProductAvailabilityRequest): unknown {
    const obj: any = {};
    if (message.productoId !== "") {
      obj.productoId = message.productoId;
    }
    if (message.cantidad !== 0) {
      obj.cantidad = Math.round(message.cantidad);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductAvailabilityRequest>, I>>(base?: I): ProductAvailabilityRequest {
    return ProductAvailabilityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductAvailabilityRequest>, I>>(object: I): ProductAvailabilityRequest {
    const message = createBaseProductAvailabilityRequest();
    message.productoId = object.productoId ?? "";
    message.cantidad = object.cantidad ?? 0;
    return message;
  },
};

function createBaseProductAvailabilityResponse(): ProductAvailabilityResponse {
  return { productoId: "", disponible: false, precio: 0, stockActual: 0 };
}

export const ProductAvailabilityResponse: MessageFns<ProductAvailabilityResponse> = {
  encode(message: ProductAvailabilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productoId !== "") {
      writer.uint32(10).string(message.productoId);
    }
    if (message.disponible !== false) {
      writer.uint32(16).bool(message.disponible);
    }
    if (message.precio !== 0) {
      writer.uint32(25).double(message.precio);
    }
    if (message.stockActual !== 0) {
      writer.uint32(32).int32(message.stockActual);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductAvailabilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductAvailabilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.disponible = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.precio = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.stockActual = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductAvailabilityResponse {
    return {
      productoId: isSet(object.productoId) ? globalThis.String(object.productoId) : "",
      disponible: isSet(object.disponible) ? globalThis.Boolean(object.disponible) : false,
      precio: isSet(object.precio) ? globalThis.Number(object.precio) : 0,
      stockActual: isSet(object.stockActual) ? globalThis.Number(object.stockActual) : 0,
    };
  },

  toJSON(message: ProductAvailabilityResponse): unknown {
    const obj: any = {};
    if (message.productoId !== "") {
      obj.productoId = message.productoId;
    }
    if (message.disponible !== false) {
      obj.disponible = message.disponible;
    }
    if (message.precio !== 0) {
      obj.precio = message.precio;
    }
    if (message.stockActual !== 0) {
      obj.stockActual = Math.round(message.stockActual);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductAvailabilityResponse>, I>>(base?: I): ProductAvailabilityResponse {
    return ProductAvailabilityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductAvailabilityResponse>, I>>(object: I): ProductAvailabilityResponse {
    const message = createBaseProductAvailabilityResponse();
    message.productoId = object.productoId ?? "";
    message.disponible = object.disponible ?? false;
    message.precio = object.precio ?? 0;
    message.stockActual = object.stockActual ?? 0;
    return message;
  },
};

export interface ProductService {
  CheckProductAvailability(request: ProductAvailabilityRequest): Promise<ProductAvailabilityResponse>;
}

export const ProductServiceServiceName = "productos.ProductService";
export class ProductServiceClientImpl implements ProductService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProductServiceServiceName;
    this.rpc = rpc;
    this.CheckProductAvailability = this.CheckProductAvailability.bind(this);
  }
  CheckProductAvailability(request: ProductAvailabilityRequest): Promise<ProductAvailabilityResponse> {
    const data = ProductAvailabilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CheckProductAvailability", data);
    return promise.then((data) => ProductAvailabilityResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
